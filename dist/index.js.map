{"version":3,"file":"index.js","sources":["../node_modules/clsx/dist/clsx.mjs","../node_modules/style-inject/dist/style-inject.es.js","../src/components/Treeview/nested/Checkbox/Checkbox.tsx","../src/components/Treeview/nested/Dropdown/Dropdown.tsx","../src/components/Treeview/nested/Node/Node.tsx","../src/components/Treeview/lib.ts","../src/components/Treeview/constants.tsx","../src/components/Treeview/Treeview.tsx"],"sourcesContent":["function r(e){var t,f,n=\"\";if(\"string\"==typeof e||\"number\"==typeof e)n+=e;else if(\"object\"==typeof e)if(Array.isArray(e)){var o=e.length;for(t=0;t<o;t++)e[t]&&(f=r(e[t]))&&(n&&(n+=\" \"),n+=f)}else for(f in e)e[f]&&(n&&(n+=\" \"),n+=f);return n}export function clsx(){for(var e,t,f=0,n=\"\",o=arguments.length;f<o;f++)(e=arguments[f])&&(t=r(e))&&(n&&(n+=\" \"),n+=t);return n}export default clsx;","function styleInject(css, ref) {\n  if ( ref === void 0 ) ref = {};\n  var insertAt = ref.insertAt;\n\n  if (!css || typeof document === 'undefined') { return; }\n\n  var head = document.head || document.getElementsByTagName('head')[0];\n  var style = document.createElement('style');\n  style.type = 'text/css';\n\n  if (insertAt === 'top') {\n    if (head.firstChild) {\n      head.insertBefore(style, head.firstChild);\n    } else {\n      head.appendChild(style);\n    }\n  } else {\n    head.appendChild(style);\n  }\n\n  if (style.styleSheet) {\n    style.styleSheet.cssText = css;\n  } else {\n    style.appendChild(document.createTextNode(css));\n  }\n}\n\nexport default styleInject;\n","import React, { FC, memo } from \"react\";\nimport clsx from \"clsx\";\nimport { CheckboxProps } from \"./types\";\n\nimport \"./Checkbox.css\";\n\nconst Checkbox: FC<CheckboxProps> = ({\n  label,\n  onChange,\n  checked,\n  disabled,\n  indeterminate,\n  classNames,\n}) => {\n  return (\n    <div className={clsx(\"checkboxWrap\", classNames.checkbox)}>\n      <input\n        type=\"checkbox\"\n        aria-label={label}\n        className={\n          indeterminate ? clsx(\"indeterminate\", classNames.indeterminate) : \"\"\n        }\n        onChange={onChange}\n        checked={checked}\n        disabled={disabled}\n      />\n      <span className={classNames.label}>{label}</span>\n    </div>\n  );\n};\n\nexport default memo(Checkbox);\n","import React, { FC, memo } from \"react\";\nimport clsx from \"clsx\";\nimport { DropdownProps } from \"./types\";\n\nimport \"./Dropdown.css\";\n\nconst openIcon = \"/chevronDown.svg\";\nconst closeIcon = \"/chevronLeft.svg\";\n\nconst Dropdown: FC<DropdownProps> = ({ open, onClick, className }) => {\n  return (\n    <div className={clsx(\"dropdown\", className)} onClick={onClick}>\n      <img className=\"icon\" src={open ? openIcon : closeIcon} alt=\"dropdown\" />\n    </div>\n  );\n};\n\nexport default memo(Dropdown);\n","import React, { FC, memo } from \"react\";\nimport clsx from \"clsx\";\nimport Checkbox from \"../Checkbox\";\nimport { NodeProps } from \"./types\";\nimport Dropdown from \"../Dropdown\";\n\nimport \"./Node.css\";\n\nconst Node: FC<NodeProps> = ({\n  data,\n  onlyRead,\n  renderChildren,\n  onToggle,\n  onChange,\n  selected,\n  indeterminate,\n  withIcons,\n  classNames,\n  iconsComponents,\n}) => {\n  const { parentIcon, childIcon } = iconsComponents;\n  const { data: node, children, open, id } = data;\n  const hasChildren = children.length > 0;\n\n  return (\n    <div className={clsx(\"nodeWrap\", classNames.wrap)}>\n      {hasChildren && (\n        <Dropdown\n          onClick={() => onToggle(id)}\n          open={open}\n          className={classNames.dropdown}\n        />\n      )}\n      <div className={clsx(\"node\", classNames.node)}>\n        {onlyRead ? (\n          <div className=\"titleBlock\">\n            {withIcons && (hasChildren ? parentIcon : childIcon)}\n            <span\n              className={clsx(\n                hasChildren || withIcons ? \"\" : \"title\",\n                classNames.label\n              )}>\n              {node.title}\n            </span>\n          </div>\n        ) : (\n          <Checkbox\n            indeterminate={indeterminate}\n            checked={selected}\n            classNames={{\n              ...classNames,\n              checkbox: clsx(classNames.checkbox, hasChildren ? \"\" : \"title\"),\n            }}\n            onChange={() => onChange(data)}\n            label={node.title}\n          />\n        )}\n        {open && hasChildren && <div>{renderChildren(children)}</div>}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(Node);\n","import { EntityType, NodeData, NodeItem, NodeMap, Value } from \"./types\";\n\n/**\n * Forms a nodes object\n * @param {NodeData[]} nodes - data array\n * @param {Value | null}  parentId - parent element id\n * @param {Value[]} values - chosen values array\n * @returns {NodeMap}\n */\nexport const getNodeMap = (\n  nodes: NodeData[],\n  parentId: Value | null,\n  values: Value[]\n): NodeMap => {\n  return nodes.reduce((map, node) => {\n    const { value, children, id } = node;\n    const open =\n      children?.some((option) => values.includes(option.value)) ||\n      values.includes(value);\n\n    const treeNode: NodeItem = {\n      children:\n        node.children?.map((option) =>\n          option.id ? option.id : option.value\n        ) ?? [],\n      data: node,\n      id: id || value,\n      open,\n      parent: parentId || null,\n    };\n\n    let childrenMap;\n\n    if (children) childrenMap = getNodeMap(children, treeNode.id, values);\n\n    return { ...map, ...childrenMap, [treeNode.id]: treeNode };\n  }, {} as NodeMap);\n};\n\n/**\n * Sets up an array of current node id and its children elements\n * @param {NodeMap} map - a map of all nodes\n * @param {Value}  id - id of current node\n * @returns {Value[]}\n */\nexport const getNodeValues = (map: NodeMap, id: Value): Value[] => {\n  const { children, data } = map[id];\n\n  return [\n    data.value,\n    ...children.reduce(\n      (values, id) => [...values, ...getNodeValues(map, id)],\n      [] as Value[]\n    ),\n  ];\n};\n\n/**\n * Sets up an array of unique values\n * @param {EntityType[]} arr - an array of chosen non-unique values\n * @returns {EntityType[]}\n */\nexport const getUniqueValues = (arr: EntityType[]): EntityType[] => {\n  return [\n    ...new Set(\n      arr.map((item) => {\n        const sortedObjectKeys = Object.keys(item).sort();\n        const obj = Object.assign(\n          {},\n          ...sortedObjectKeys.map((i) => ({\n            [i]: item[i as keyof typeof item],\n          }))\n        );\n        return JSON.stringify(obj);\n      })\n    ),\n  ].map((s) => JSON.parse(s));\n};\n\n/**\n *  Recursively flattens a tree structure into a single array of children nodes\n * @param {NodeData} data - a tree value\n * @returns {EntityType[]}\n */\nexport const flattenTree = (data: NodeData): EntityType[] => {\n  if (!data) return [];\n\n  let result: EntityType[] = [];\n\n  if (data.children) {\n    data.children.forEach((child) => {\n      result.push({ id: child.value, name: child.title });\n      result = result.concat(flattenTree(child));\n    });\n  }\n\n  return result;\n};\n\n/**\n *  Recursively checks if any descendant is selected\n * @param {NodeData} node - a tree node\n * @param {Value[]} selected - an array of selected values\n * @returns {boolean}\n */\nexport const hasSelectedDescendants = (\n  node: NodeData,\n  selected: Value[]\n): boolean => {\n  if (!node.children) return false;\n\n  return node.children.some(\n    (child) =>\n      selected.includes(child.value) || hasSelectedDescendants(child, selected)\n  );\n};\n","import React from \"react\";\nimport clsx from \"clsx\";\nimport { IconComponents } from \"./types\";\n\nconst folderClosed = \"/folderClosed.svg\";\nconst file = \"file.svg\";\n\nexport const DEFAULT_COMPONENTS: IconComponents = {\n  parentIcon: <img className=\"folderIcon\" src={folderClosed} alt=\"folder\" />,\n  childIcon: (\n    <img className={clsx(\"folderIcon\", \"title\")} src={file} alt=\"file\" />\n  ),\n};\n","import React, {\n  FC,\n  memo,\n  useCallback,\n  useLayoutEffect,\n  useMemo,\n  useState,\n} from \"react\";\nimport { EntityType, NodeItem, NodeMap, TreeviewProps, Value } from \"./types\";\nimport Node from \"./nested/Node\";\nimport {\n  flattenTree,\n  getNodeMap,\n  getNodeValues,\n  getUniqueValues,\n  hasSelectedDescendants,\n} from \"./lib\";\nimport { DEFAULT_COMPONENTS } from \"./constants\";\n\nimport \"./Treeview.css\";\n\nconst Treeview: FC<TreeviewProps> = ({\n  data,\n  onChange,\n  value = [],\n  classNames = {},\n  onlyRead = true,\n  withIcons = false,\n  iconsComponents = DEFAULT_COMPONENTS,\n}) => {\n  const [nodeMap, setNodeMap] = useState<NodeMap>({});\n\n  const selected = useMemo(() => {\n    return value.map((i) => i.id);\n  }, [value]);\n\n  useLayoutEffect(() => {\n    setNodeMap(getNodeMap(data, null, selected));\n  }, []);\n\n  const roots = useMemo(() => {\n    return Object.keys(nodeMap).filter((key) => nodeMap[key].parent === null);\n  }, [nodeMap]);\n\n  const onToggle = useCallback(\n    (id: Value): void => {\n      const newNode = { ...nodeMap[id], open: !nodeMap[id].open };\n\n      setNodeMap({ ...nodeMap, [id]: newNode });\n    },\n    [nodeMap]\n  );\n\n  const handleChange = useCallback(\n    (node: NodeItem): void => {\n      if (!onChange) return;\n\n      const { data, children, parent, id } = node;\n\n      let ids = [data.value];\n      let returnValue: EntityType[] = [{ id: data.value, name: data.title }];\n\n      if (children) {\n        ids = getNodeValues(nodeMap, id);\n      }\n\n      const childrenItems = flattenTree(data);\n\n      returnValue = childrenItems\n        ? [...childrenItems, { id: data.value, name: data.title }]\n        : [{ id: data.value, name: data.title }];\n\n      const newValue = selected.includes(data.value)\n        ? value.filter((item) => !ids.includes(item.id) && item.id !== parent)\n        : getUniqueValues([...value, ...returnValue]);\n\n      if (parent) {\n        const parentNode = nodeMap[parent];\n        const newValueIds = newValue.map((val) => val.id);\n        const allChildrenSelected = parentNode.data.children?.every((child) =>\n          newValueIds.includes(child.value)\n        );\n        if (allChildrenSelected) {\n          returnValue = [\n            { id: parentNode.data.value, name: parentNode.data.title },\n          ];\n          onChange([...newValue, ...returnValue]);\n        } else {\n          onChange(newValue);\n        }\n      } else {\n        onChange(newValue);\n      }\n    },\n    [value, nodeMap]\n  );\n\n  const renderNode = (id: Value) => {\n    const node = nodeMap[id];\n    const { data } = node;\n    const isSelected = selected.includes(data.value);\n    const isIndeterminate = hasSelectedDescendants(data, selected);\n\n    return (\n      <Node\n        key={id}\n        data={node}\n        classNames={classNames}\n        onlyRead={onlyRead}\n        withIcons={withIcons}\n        iconsComponents={iconsComponents}\n        renderChildren={(ids) => ids.map(renderNode)}\n        onToggle={onToggle}\n        onChange={handleChange}\n        selected={isSelected}\n        indeterminate={!isSelected && isIndeterminate}\n      />\n    );\n  };\n\n  return <div className=\"wrap\">{roots.map(renderNode)}</div>;\n};\n\nexport default memo(Treeview);\n"],"names":["r","e","t","f","n","Array","isArray","o","length","clsx","arguments","styleInject","css","ref","insertAt","document","head","getElementsByTagName","style","createElement","type","firstChild","insertBefore","appendChild","styleSheet","cssText","createTextNode","Checkbox$1","memo","label","onChange","checked","disabled","indeterminate","classNames","_jsxs","className","checkbox","children","_jsx","Dropdown$1","open","onClick","src","alt","Node$1","data","onlyRead","renderChildren","onToggle","selected","withIcons","iconsComponents","parentIcon","childIcon","node","id","hasChildren","wrap","Dropdown","dropdown","title","Checkbox","Object","assign","getNodeMap","nodes","parentId","values","reduce","map","value","some","option","includes","treeNode","_b","_a","parent","childrenMap","getNodeValues","flattenTree","result","forEach","child","push","name","concat","hasSelectedDescendants","DEFAULT_COMPONENTS","nodeMap","setNodeMap","useState","useMemo","i","useLayoutEffect","roots","keys","filter","key","useCallback","newNode","handleChange","ids","returnValue","childrenItems","newValue","item","arr","Set","sortedObjectKeys","sort","obj","JSON","stringify","s","parse","parentNode","newValueIds","val","every","renderNode","isSelected","isIndeterminate","Node"],"mappings":"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","x_google_ignoreList":[0,1]}